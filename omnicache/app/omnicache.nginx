# Copyright (c) 2024, Chen Fang mtdcy.chen@gmail.com
# 
# Ready For:
#  - ubuntu|debian
#       http://<domain>/ubuntu
#  - alpine
#       http://<domain>/alpine
#  - python pip 
#       pip3 config set global.index-url https://<domain>/pypi/simple
#  - npm
#       npm config set registry https://<domain>/npmjs
#  - homebrew
#       export HOMEBREW_BOTTLE_DOMAIN=http://<domain>/homebrew-bottles
#       export HOMEBREW_API_DOMAIN=http://<domain>/homebrew-bottles/api
#       git -C "$(brew --repo homebrew/core)" remote set-url origin http://<domain>/homebrew-core.git 

log_format omnicache '[$time_local] >$status< $host:$server_port "$request" '
                     '$request_time $upstream_response_time << $http_x_forwarded_for '
                     '>> $omnicache_method $upstream_cache_status';

log_format upstreams '[$time_local] >$status< $host:$server_port "$request" '
                     '$request_time $upstream_response_time << $http_x_forwarded_for '
                     '>> "$proxy_host$uri"';

include /app/omnicache/dns.conf*;
include /app/omnicache/upstreams/*.nginx;

# upstream mirrors
upstream backends {
    server 127.0.0.1:81;
    server 127.0.0.1:88 backup;
}

proxy_cache_path /data/cache levels=1:2 keys_zone=omnicache:8m max_size=1000m inactive=600m;
proxy_temp_path  /data/temp;

variables_hash_max_size     2048;
variables_hash_bucket_size  64;

server {
    listen 80;
    server_name _;
    include /app/omnicache/ssl.conf*;

    root /data/static;
    access_log /var/log/nginx/access.log omnicache;

    proxy_http_version  1.1;
    proxy_set_header    Upgrade     $http_upgrade;  
    proxy_set_header    Connection  'upgrade';  
    proxy_set_header    Host        $http_host;

    proxy_next_upstream_tries 2;
    proxy_next_upstream     error timeout http_404 http_500 http_502 http_503 http_504;
    proxy_cache_use_stale   error timeout http_404 http_500 http_502 http_503 http_504;
    proxy_ignore_headers    X-Accel-Expires Expires Cache-Control Set-Cookie;

    # set default value, update later
    set $omnicache_method   "STATIC";

    # ubuntu|debian|raspberrypi
    location ~ ^/(ubuntu.*|debian.*|raspberrypi/debian|kali)/pool/ {
        add_header X-debug-message "A cached deb file" always;
        try_files $uri @fetch;
    }

    # alpine
    location ~ ^/alpine/.*\.(apk|iso)$ {
        add_header X-debug-message "A cached alpine file" always;
        try_files $uri @fetch;
    }

    # openwrt or immortalwrt
    location ~ ^/(openwrt|immortalwrt)/.*\.ipk$ {
        add_header X-debug-message "A cached openwrt file" always;
        try_files $uri @fetch;
    }

    # python pip 
    location ~ ^/pypi/.*\.whl$ {
        add_header X-debug-message "A cached pypi file" always;
        try_files $uri @fetch;
    }

    # npm registry
    location ~ ^/npmjs/.*\.tgz$ {
        add_header X-debug-message "A cached npm file" always;
        try_files $uri @fetch;
    }

    # gnu ftp
    location ^~ /gnu/ {
        try_files $uri @fetch;
    }

    # homebrew 
    location ~ ^/homebrew-bottles/.*\.tar.gz$ {
        add_header X-debug-message "A cached homebrew file" always;
        try_files $uri @fetch;
    }

    # fetch and store static files => mirror
    location @fetch {
        internal;
        set $omnicache_method "FETCH";
        proxy_pass  http://backends;

        expires             max;
        proxy_store         on;
        proxy_store_access  user:rw group:rw all:r;
       
        # headers
        add_header X-debug-message "A fresh file" always;
        
        # some client may not support redirect.
        proxy_intercept_errors on;
        error_page 301 302 307 = @redirection;
    }

    location / {
        set $omnicache_method "CACHE";
        proxy_pass http://backends;

        proxy_cache         omnicache;
        proxy_cache_valid   200 302     1d;
        proxy_cache_valid   404         1m;
        proxy_cache_valid   any         1m;
        proxy_cache_methods HEAD GET POST;
        proxy_cache_revalidate          on;
        proxy_cache_background_update   on;

        # headers 
        add_header X-Cache-Status $upstream_cache_status;
        
        # some client may not support redirect.
        proxy_intercept_errors on;
        error_page 301 302 307 = @redirection;
    }

    location @redirection {
        internal;
        add_header X-debug-message "Redirected: $upstream_http_location" always;
        set $saved_redirect_location '$upstream_http_location';
        proxy_pass $saved_redirect_location;
    }
}
