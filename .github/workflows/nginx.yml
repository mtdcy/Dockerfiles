---
name: Build nginx

on:
  push:
    paths:
      - nginx/Dockerfile
      - nginx/rootfs/**
      - .github/workflows/nginx.yml

# workflows_run:
#   workflows: [Build baseimage]
#   types:
#     - completed

  workflow_call: null

  workflow_dispatch:
    inputs:
      nginx:
        type: string
        description: nginx version to build

env:
  nginx: 1.28.0

jobs:
  # env is unavailable under jobs.<job_id>.with.<with_id>
  setup-nginx:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    outputs:
      nginx: ${{ steps.prepare.outputs.nginx }}

    steps:
      - name: Prepare
        id: prepare
        shell: bash
        run: |
          version=${{ inputs.nginx }}
          [ -n "$version" ] || version=${{ env.nginx }}

          echo "nginx=$version" >> "$GITHUB_OUTPUT"

  build-nginx:
    name: Build nginx-${{ matrix.arch }} on ${{ matrix.os }}
    needs: setup-nginx
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: amd64
          - os: ubuntu-22.04-arm
            arch: arm64
    uses: ./.github/workflows/buildx.yml
    secrets: inherit
    with:
      runner: ${{ matrix.os }}
      platforms: linux/${{ matrix.arch }}
      context: nginx
      baseimage: ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/baseimage:ubuntu-latest
      tags: |
        ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:${{ needs.setup-nginx.outputs.nginx }}-${{ matrix.arch }}
      cache: |
        ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:cache-${{ matrix.arch }}

  merge-tagged-nginx:
    runs-on: ubuntu-latest
    needs:
      - setup-nginx
      - build-nginx
    steps:
      # need to login and setup registry again
      - name: Login
        env:
          token: ${{ secrets.REGISTRY_TOKEN }}
        if: ${{ env.token != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ vars.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Merge tagged images
        shell: bash
        run: |-
          set -ex

          version="${{ needs.setup-nginx.outputs.nginx }}"
          IFS='=.' read -r m n _ <<< "$version"

          # nginx:latest
          docker manifest create --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:latest         \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-amd64 \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-arm64
          docker manifest push   --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:latest

          # nginx:1.28.0
          docker manifest create --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version       \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-amd64 \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-arm64
          docker manifest push   --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version

          # nginx:1.28
          docker manifest create --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$m.$n          \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-amd64 \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-arm64
          docker manifest push   --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$m.$n

          # nginx:1
          docker manifest create --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$m             \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-amd64 \
                                    --amend ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$version-arm64
          docker manifest push   --insecure ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/nginx:$m
